diff --git a/tests/util.c b/tests/util.c
index bcf90c2..dad995c 100644
--- a/tests/util.c
+++ b/tests/util.c
@@ -76,7 +76,9 @@ test_utf8_make_valid (void)
     /* last sequence of each length */
     { "\x7f", "\x7f" },
     { "\xdf\xbf", "\xdf\xbf" },
+#if !GLIB_CHECK_VERSION (2, 36, 0)
     { "\xef\xbf\xbf", "\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd" },
+#endif
     { "\xf7\xbf\xbf\xbf", "\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd" },
     { "\xfb\xbf\xbf\xbf\xbf", "\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd" },
     { "\xfd\xbf\xbf\xbf\xbf\xbf", "\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd" },
@@ -84,7 +86,9 @@ test_utf8_make_valid (void)
     { "\xed\x9f\xbf", "\xed\x9f\xbf" },
     { "\xee\x80\x80", "\xee\x80\x80" },
     { "\xef\xbf\xbd", "\xef\xbf\xbd" },
+#if !GLIB_CHECK_VERSION (2, 36, 0)
     { "\xf4\x8f\xbf\xbf", "\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd" },
+#endif
     { "\xf4\x90\x80\x80", "\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd" },
     /* malformed sequences */
     /* continuation bytes */
@@ -270,8 +274,10 @@ test_utf8_make_valid (void)
     { "\x20\xed\xae\x80\xed\xbf\xbf\x20", "\x20\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\x20" },
     { "\x20\xed\xaf\xbf\xed\xb0\x80\x20", "\x20\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\x20" },
     { "\x20\xed\xaf\xbf\xed\xbf\xbf\x20", "\x20\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\x20" },
+#if !GLIB_CHECK_VERSION (2, 36, 0)
     { "\x20\xef\xbf\xbe\x20", "\x20\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\x20" },
     { "\x20\xef\xbf\xbf\x20", "\x20\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\x20" },
+#endif
 
     { NULL, NULL }
   };
diff --git a/tests/lib/file-transfer-chan.c b/tests/lib/file-transfer-chan.c
index 36c10dd..8f58943 100644
--- a/tests/lib/file-transfer-chan.c
+++ b/tests/lib/file-transfer-chan.c
@@ -81,6 +81,8 @@ struct _TpTestsFileTransferChannelPrivate {
     gchar *unix_address;
     guint connection_id;
     TpSocketAccessControl access_control;
+
+    guint timer_id;
 };
 
 static void
@@ -135,6 +137,12 @@ dispose (GObject *object)
 {
   TpTestsFileTransferChannel *self = TP_TESTS_FILE_TRANSFER_CHANNEL (object);
 
+  if (self->priv->timer_id != 0)
+    {
+      g_source_remove (self->priv->timer_id);
+      self->priv->timer_id = 0;
+    }
+
   g_free (self->priv->content_hash);
   g_free (self->priv->content_type);
   g_free (self->priv->description);
@@ -364,6 +372,7 @@ start_file_transfer (gpointer data)
 //  g_signal_connect (self->priv->service, "incoming", G_CALLBACK
 //      (incoming_file_transfer_cb));
 
+  self->priv->timer_id = 0;
   return FALSE;
 }
 
@@ -485,7 +494,7 @@ file_transfer_provide_file (TpSvcChannelTypeFileTransfer *iface,
   self->priv->access_control = access_control;
 
   DEBUG ("Waiting 500ms and setting state to OPEN");
-  g_timeout_add (500, start_file_transfer, self);
+  self->priv->timer_id = g_timeout_add (500, start_file_transfer, self);
 
   // connect to self->priv->service incoming signal
   // when the signal returns, add x bytes per n seconds using timeout
@@ -552,7 +561,7 @@ file_transfer_accept_file (TpSvcChannelTypeFileTransfer *iface,
       TP_FILE_TRANSFER_STATE_CHANGE_REASON_REQUESTED);
 
   DEBUG ("Waiting 500ms and setting state to OPEN");
-  g_timeout_add (500, start_file_transfer, self);
+  self->priv->timer_id = g_timeout_add (500, start_file_transfer, self);
 
   tp_svc_channel_type_file_transfer_return_from_accept_file (context,
       address);
